// Mocks generated by Mockito 5.3.2 from annotations
// in kraya_backend/features/owner/appointment/domain/repository/bank_appointment.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:kraya_backend/core/error/failures.dart' as _i5;
import 'package:kraya_backend/features/owner/appointment/domain/repository/bank_appointment.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OwnerAppointmentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOwnerAppointmentRepository extends _i1.Mock
    implements _i3.OwnerAppointmentRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> add({
    required int? ownerId,
    required String? name,
    required String? phone,
    required String? secondPhone,
    required String? address,
    required double? latitude,
    required double? longitude,
    required DateTime? date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [],
          {
            #ownerId: ownerId,
            #name: name,
            #phone: phone,
            #secondPhone: secondPhone,
            #address: address,
            #latitude: latitude,
            #longitude: longitude,
            #date: date,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #add,
            [],
            {
              #ownerId: ownerId,
              #name: name,
              #phone: phone,
              #secondPhone: secondPhone,
              #address: address,
              #latitude: latitude,
              #longitude: longitude,
              #date: date,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #add,
            [],
            {
              #ownerId: ownerId,
              #name: name,
              #phone: phone,
              #secondPhone: secondPhone,
              #address: address,
              #latitude: latitude,
              #longitude: longitude,
              #date: date,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
