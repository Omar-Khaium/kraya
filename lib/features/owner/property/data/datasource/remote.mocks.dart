// Mocks generated by Mockito 5.3.2 from annotations
// in kraya_backend/features/owner/property/data/datasource/remote.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i6;

import 'package:kraya_backend/core/entity/availabiilty_entity.dart' as _i5;
import 'package:kraya_backend/features/core/property/domain/entity/bills.dart'
    as _i4;
import 'package:kraya_backend/features/owner/property/data/datasource/remote.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [OwnerPropertyRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockOwnerPropertyRemoteDataSource extends _i1.Mock
    implements _i2.OwnerPropertyRemoteDataSource {
  @override
  _i3.Future<bool> add({
    required int? ownerId,
    required int? tenantId,
    required int? typeId,
    required int? subTypeId,
    required String? buildingName,
    required String? flatName,
    required String? address,
    required int? size,
    required int? room,
    required int? bathroom,
    required int? balcony,
    required int? advance,
    required int? rent,
    required String? description,
    required List<int>? features,
    required List<_i4.BillEntity>? bills,
    required _i5.AvailabilityEntity? availabilityModel,
    required List<_i6.File>? pictures,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [],
          {
            #ownerId: ownerId,
            #tenantId: tenantId,
            #typeId: typeId,
            #subTypeId: subTypeId,
            #buildingName: buildingName,
            #flatName: flatName,
            #address: address,
            #size: size,
            #room: room,
            #bathroom: bathroom,
            #balcony: balcony,
            #advance: advance,
            #rent: rent,
            #description: description,
            #features: features,
            #bills: bills,
            #availabilityModel: availabilityModel,
            #pictures: pictures,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> edit({
    required int? propertyId,
    required int? ownerId,
    required int? tenantId,
    required int? typeId,
    required int? subTypeId,
    required String? buildingName,
    required String? flatName,
    required String? address,
    required int? size,
    required int? room,
    required int? bathroom,
    required int? balcony,
    required int? advance,
    required int? rent,
    required String? description,
    required List<int>? features,
    required List<_i4.BillEntity>? bills,
    required _i5.AvailabilityEntity? availabilityModel,
    required List<String>? oldPictures,
    required List<_i6.File>? newPictures,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #edit,
          [],
          {
            #propertyId: propertyId,
            #ownerId: ownerId,
            #tenantId: tenantId,
            #typeId: typeId,
            #subTypeId: subTypeId,
            #buildingName: buildingName,
            #flatName: flatName,
            #address: address,
            #size: size,
            #room: room,
            #bathroom: bathroom,
            #balcony: balcony,
            #advance: advance,
            #rent: rent,
            #description: description,
            #features: features,
            #bills: bills,
            #availabilityModel: availabilityModel,
            #oldPictures: oldPictures,
            #newPictures: newPictures,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> sendBill({
    required int? propertyId,
    required int? tenantId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendBill,
          [],
          {
            #propertyId: propertyId,
            #tenantId: tenantId,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<List<int>> allProperties({required int? ownerId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #allProperties,
          [],
          {#ownerId: ownerId},
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);
}
