// Mocks generated by Mockito 5.3.2 from annotations
// in kraya_backend/features/tenant/profile/domain/repository/profile.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:kraya_backend/core/error/failures.dart' as _i5;
import 'package:kraya_backend/features/tenant/profile/domain/entity/full_profile.dart' as _i7;
import 'package:kraya_backend/features/tenant/profile/domain/repository/profile.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TenantProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTenantProfileRepository extends _i1.Mock implements _i3.TenantProfileRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> update({
    required int? tenantId,
    required String? nidNumber,
    required String? passportNumber,
    required String? email,
    required int? religion,
    required String? fatherName,
    required String? address,
    required String? occupation,
    required String? jobAddress,
    required _i6.File? nidPhoto,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #tenantId: tenantId,
            #nidNumber: nidNumber,
            #passportNumnber: passportNumber,
            #email: email,
            #religion: religion,
            #fatherName: fatherName,
            #address: address,
            #occupation: occupation,
            #jobAddress: jobAddress,
            #nidPhoto: nidPhoto,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(_FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #update,
            [],
            {
              #tenantId: tenantId,
              #nidNumber: nidNumber,
              #passportNumnber: passportNumber,
              #email: email,
              #religion: religion,
              #fatherName: fatherName,
              #address: address,
              #occupation: occupation,
              #jobAddress: jobAddress,
              #nidPhoto: nidPhoto,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(_FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #update,
            [],
            {
              #tenantId: tenantId,
              #nidNumber: nidNumber,
              #passportNumnber: passportNumber,
              #email: email,
              #religion: religion,
              #fatherName: fatherName,
              #address: address,
              #occupation: occupation,
              #jobAddress: jobAddress,
              #nidPhoto: nidPhoto,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.TenantFullProfileEntity>> fullProfile({required int? tenantId}) => (super.noSuchMethod(
        Invocation.method(
          #fullProfile,
          [],
          {#id: tenantId},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i7.TenantFullProfileEntity>>.value(_FakeEither_0<_i5.Failure, _i7.TenantFullProfileEntity>(
          this,
          Invocation.method(
            #fullProfile,
            [],
            {#id: tenantId},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i7.TenantFullProfileEntity>>.value(_FakeEither_0<_i5.Failure, _i7.TenantFullProfileEntity>(
          this,
          Invocation.method(
            #fullProfile,
            [],
            {#id: tenantId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.TenantFullProfileEntity>>);
}
